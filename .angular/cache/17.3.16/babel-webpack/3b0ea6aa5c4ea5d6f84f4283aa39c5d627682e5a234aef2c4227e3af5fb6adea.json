{"ast":null,"code":"import { NavigationEnd } from '@angular/router';\nimport { filter, map, mergeMap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/platform-browser\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"../i18n/translations.service\";\nexport class SeoService {\n  constructor(titleService, metaService, router, activatedRoute, translationsService) {\n    this.titleService = titleService;\n    this.metaService = metaService;\n    this.router = router;\n    this.activatedRoute = activatedRoute;\n    this.translationsService = translationsService;\n  }\n  init() {\n    // Update meta tags based on route data\n    this.router.events.pipe(filter(event => event instanceof NavigationEnd), map(() => this.activatedRoute), map(route => {\n      while (route.firstChild) {\n        route = route.firstChild;\n      }\n      return route;\n    }), filter(route => route.outlet === 'primary'), mergeMap(route => route.data)).subscribe(data => {\n      const title = data['title'] || 'Strike 2024 Museum';\n      this.updateTitle(title);\n      if (data['description']) {\n        this.updateDescription(data['description']);\n      }\n      if (data['keywords']) {\n        this.updateKeywords(data['keywords']);\n      }\n    });\n    // Listen for language changes to update meta tags\n    this.translationsService.currentLanguage$.subscribe(() => {\n      // Re-apply meta tags when language changes\n      this.updateCurrentRouteMeta();\n    });\n  }\n  updateCurrentRouteMeta() {\n    let route = this.activatedRoute;\n    while (route.firstChild) {\n      route = route.firstChild;\n    }\n    if (route.snapshot.data['title']) {\n      this.updateTitle(route.snapshot.data['title']);\n    }\n    if (route.snapshot.data['description']) {\n      this.updateDescription(route.snapshot.data['description']);\n    }\n  }\n  updateTitle(title) {\n    this.titleService.setTitle(title);\n    this.metaService.updateTag({\n      property: 'og:title',\n      content: title\n    });\n    this.metaService.updateTag({\n      name: 'twitter:title',\n      content: title\n    });\n  }\n  updateDescription(description) {\n    this.metaService.updateTag({\n      name: 'description',\n      content: description\n    });\n    this.metaService.updateTag({\n      property: 'og:description',\n      content: description\n    });\n    this.metaService.updateTag({\n      name: 'twitter:description',\n      content: description\n    });\n  }\n  updateKeywords(keywords) {\n    this.metaService.updateTag({\n      name: 'keywords',\n      content: keywords\n    });\n  }\n  updateOgImage(imageUrl) {\n    this.metaService.updateTag({\n      property: 'og:image',\n      content: imageUrl\n    });\n    this.metaService.updateTag({\n      name: 'twitter:image',\n      content: imageUrl\n    });\n  }\n  static {\n    this.ɵfac = function SeoService_Factory(t) {\n      return new (t || SeoService)(i0.ɵɵinject(i1.Title), i0.ɵɵinject(i1.Meta), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i2.ActivatedRoute), i0.ɵɵinject(i3.TranslationsService));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: SeoService,\n      factory: SeoService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["NavigationEnd","filter","map","mergeMap","SeoService","constructor","titleService","metaService","router","activatedRoute","translationsService","init","events","pipe","event","route","firstChild","outlet","data","subscribe","title","updateTitle","updateDescription","updateKeywords","currentLanguage$","updateCurrentRouteMeta","snapshot","setTitle","updateTag","property","content","name","description","keywords","updateOgImage","imageUrl","i0","ɵɵinject","i1","Title","Meta","i2","Router","ActivatedRoute","i3","TranslationsService","factory","ɵfac","providedIn"],"sources":["D:\\Personal Projects\\project-bolt-sb1-jpivxa2j(july-updated)\\project\\src\\app\\core\\services\\seo\\seo.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Title, Meta } from '@angular/platform-browser';\nimport { Router, NavigationEnd, ActivatedRoute } from '@angular/router';\nimport { TranslationsService } from '../i18n/translations.service';\nimport { filter, map, mergeMap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SeoService {\n  constructor(\n    private titleService: Title,\n    private metaService: Meta,\n    private router: Router,\n    private activatedRoute: ActivatedRoute,\n    private translationsService: TranslationsService\n  ) {}\n\n  init() {\n    // Update meta tags based on route data\n    this.router.events.pipe(\n      filter(event => event instanceof NavigationEnd),\n      map(() => this.activatedRoute),\n      map(route => {\n        while (route.firstChild) {\n          route = route.firstChild;\n        }\n        return route;\n      }),\n      filter(route => route.outlet === 'primary'),\n      mergeMap(route => route.data)\n    ).subscribe(data => {\n      const title = data['title'] || 'Strike 2024 Museum';\n      this.updateTitle(title);\n      \n      if (data['description']) {\n        this.updateDescription(data['description']);\n      }\n      \n      if (data['keywords']) {\n        this.updateKeywords(data['keywords']);\n      }\n    });\n\n    // Listen for language changes to update meta tags\n    this.translationsService.currentLanguage$.subscribe(() => {\n      // Re-apply meta tags when language changes\n      this.updateCurrentRouteMeta();\n    });\n  }\n\n  private updateCurrentRouteMeta() {\n    let route = this.activatedRoute;\n    while (route.firstChild) {\n      route = route.firstChild;\n    }\n    \n    if (route.snapshot.data['title']) {\n      this.updateTitle(route.snapshot.data['title']);\n    }\n    \n    if (route.snapshot.data['description']) {\n      this.updateDescription(route.snapshot.data['description']);\n    }\n  }\n\n  updateTitle(title: string) {\n    this.titleService.setTitle(title);\n    this.metaService.updateTag({ property: 'og:title', content: title });\n    this.metaService.updateTag({ name: 'twitter:title', content: title });\n  }\n\n  updateDescription(description: string) {\n    this.metaService.updateTag({ name: 'description', content: description });\n    this.metaService.updateTag({ property: 'og:description', content: description });\n    this.metaService.updateTag({ name: 'twitter:description', content: description });\n  }\n\n  updateKeywords(keywords: string) {\n    this.metaService.updateTag({ name: 'keywords', content: keywords });\n  }\n\n  updateOgImage(imageUrl: string) {\n    this.metaService.updateTag({ property: 'og:image', content: imageUrl });\n    this.metaService.updateTag({ name: 'twitter:image', content: imageUrl });\n  }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}